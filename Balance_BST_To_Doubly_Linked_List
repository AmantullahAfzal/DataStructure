package TreeCode;

import TreeCode.BalanceBinaryTree.Node;

public class Balance_BST_To_Doubly_Linked_List {
	Node prev = null;
	Node head = null;
	
	class Node{
		int data;
		Node left,right;
		Node(int data){
			this.data = data;
			left=right=null;
		}
	}
	public Node createBBT(int arr[] , int start, int end){
		if(start>end) return null;
		int mid = (start+end)/2;
		Node root = new Node(arr[mid]);
		root.left = createBBT(arr,start,mid-1);
		root.right = createBBT(arr,mid+1,end);
		return root;
	}
	
	public void convertDLL(Node root ){
		if(root == null)
			return ;
		convertDLL(root.left);
		if(head==null){
			head = root;
		}else{
			root.left = prev;
			prev.right = root;
		}
		prev = root;
		convertDLL(root.right);
	}
	
	public void printPreOrderBBT(Node head){
		if(head!=null){
			System.out.print(head.data +" ");
			printPreOrderBBT(head.left);
			printPreOrderBBT(head.right);
		}
	}
	
	public void printDLL(){
		Node temp = head;
		while(temp!=null){
			System.out.print(temp.data + " ");
			temp = temp.right;
		}
	}
	
	public static void main(String arg[]){
		int arr[] = {1,2,3,4,5,6,7,8};
		Balance_BST_To_Doubly_Linked_List BBT = new Balance_BST_To_Doubly_Linked_List();
		Node root = BBT.createBBT(arr,0,arr.length-1);
		System.out.println("Balance BST is : ");
		BBT.printPreOrderBBT(root);
		BBT.convertDLL(root);
		System.out.println("");
		System.out.println("Doubly linked List for above BST is : ");
		BBT.printDLL();
	}
}
